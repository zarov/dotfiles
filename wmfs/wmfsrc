#
# WMFS2 configuration file
#

# Possible file inclusion:
# @include "file"

# Multi theme section
[themes]
  	[theme]
     	# Font
	 	font = "-*-ohsnap.icons-medium-*-*-*-11-*-*-*-*-*-*-*"
	    
		# Bars
	    bars_width = 18
	    bars_fg = "#c0c0c0"
     	bars_bg = "#121212"

     	# Element tags
     	tags_normal_fg = "#c0c0c0"
     	tags_normal_bg = "#232323"
     	# tags_normal_statusline = ""

     	tags_sel_fg    = "#d7af5f"
     	tags_sel_bg    = "#343434"
     	tags_sel_statusline = "\R[1;1;3;3;#f6f8fa]"

     	tags_occupied_fg = "#c0c0c0"
     	tags_occupied_bg = "#2a2a2a"
     	tags_occupied_statusline = "\R[1;1;3;3;#c0c0c0]"

     	tags_urgent_fg    = "#f96d6d"
     	tags_urgent_bg    = "#2a2a2a"
     	tags_urgent_statusline = "\R[1;1;4;4;#c0c0c0]"

     	tags_border_color = "#eeeeee"
     	tags_border_width = 0

     	# Frame / Client
     	client_normal_fg = "#f6f8fa"
     	client_normal_bg = "#121212"
     	client_normal_statusline = "\s[5;10;#f6f8fa;x](1;client_close)"
	
     	client_sel_fg = "#121212"
     	client_sel_bg = "#c0c0c0"
     	client_sel_statusline = "\s[5;10;#121212;x](1;client_close)"

     	frame_bg = "#c0c0c0"
     	client_titlebar_width = 0
     	client_border_width = 1
	[/theme]
[/themes]

[bars]

  	# Position:
  	#
  	# 0  Top
  	# 1  Bottom
  	# 2  Hide
	
  	# Element type:
  	#
  	# t  Tags
  	# s  Statustext (will take available space)
  	# y  Systray (can be set only ONE time among all element)
  	# l  Launcher (will be expended at launcher use)

  	[bar]
     	position = 0
     	screen = 0
     	elements = "tlsy"   # element order in bar
     	theme = "default"
  	[/bar]
[/bars]

[tags]
  	# Use no screen option or screen = -1 to set tag on each screen
  	[tag] name = "min"		layout="tile_grid"	[/tag]
  	[tag] name = "tad"	   	layout="tile_grid"	[/tag]
  	[tag] name = "nel"		layout="tile_grid"	[/tag]
  	[tag] name = "canad"	layout="tile_grid"	[/tag]
  	[tag] name = "lain"	   	layout="tile_grid"	[/tag]

  	# Mousebinds associated to Tags element button
  	[mouse] button = "1" func = "tag_click" [/mouse]
  	[mouse] button = "4" func = "tag_next"  [/mouse]
  	[mouse] button = "5" func = "tag_prev"  [/mouse]
[/tags]

[client]
  	theme = "bird"
  	key_modifier = "Super"
  	autofocus = true
  	focus = click
  
  	[mouse] button = "1" func = "client_focus_click"    [/mouse]
  	[mouse] button = "1" func = "mouse_swap"            [/mouse]
  	[mouse] button = "2" func = "mouse_tab"             [/mouse]
  	[mouse] button = "3" func = "mouse_resize"          [/mouse]
  	[mouse] button = "4" func = "client_focus_next_tab" [/mouse]
  	[mouse] button = "5" func = "client_focus_prev_tab" [/mouse]
[/client]

[rules]
	[rule]
		class = "MPlayer"
		instance = "xv"
		tag = 1
	[/rule]

	[rule]
		instance = "vlc"
		class = "Vlc"
		free = true
	[/rule]
	
	[rule]
		class = "Chromium"
		tag = 2
	[/rule]
	
	[rule]
		class = "Gimp"
		instance = "gimp"
		free = true
		tag = 4
	[/rule]
	
	[rule]
		instance = "ncmpcpp"
		class = "urxvtc -name ncmpcpp -e ncmpcpp"
		free = true
	[/rule]

	[rule]
		instance = "Steam"
		free = true
		tag = 4
	[/rule]

	[rule]
		instance = "google-musicmanager"
		free = true
	[/rule]
[/rules]

[launchers]
  	# command can be an uicb function or an uicb function + extension (see example)
  	[launcher]
     	name = "exec"
     	prompt = "Run:"
     	command = "spawn"
     	width = 300
  	[/launcher]
[/launchers]

[keys]
  	[key] mod = {"Super"} key = "Return" func = "spawn" cmd = "urxvtc || xterm" [/key]

  	[key] mod = {"Control", "Alt"} key = "q" func = "quit" [/key]
  	[key] mod = {"Control", "Alt"} key = "r" func = "reload" [/key]
        
		# Applications
    [key] mod = {"Control", "Super"} key = "t" func = "spawn" cmd = "urxvtc"													[/key]
    [key] mod = {"Control", "Super"} key = "c" func = "spawn" cmd = "chromium"											  [/key]
    [key] mod = {"Control", "Super"} key = "l" func = "spawn" cmd = "libreoffice"											[/key]
    [key] mod = {"Control", "Super"} key = "v" func = "spawn" cmd = "vlc"														  [/key]
    [key] mod = {"Control", "Super"} key = "u" func = "spawn" cmd = "thunar"									        [/key]
    [key] mod = {"Control", "Super"} key = "w" func = "spawn" cmd = "filezilla"												[/key]
    [key] mod = {"Control", "Super"} key = "a" func = "spawn" cmd = "acroread"												[/key]
    [key] mod = {"Control", "Super"} key = "g" func = "spawn" cmd = "gimp"														[/key]
    [key] mod = {"Control", "Super"} key = "n" func = "spawn" cmd = "urxvtc -name ncmpcpp -e ncmpcpp" [/key]
    [key] mod = {"Control", "Super"} key = "i" func = "spawn" cmd = "urxvtc -name irssi -e irssi"			[/key]
    [key] mod = {"Control", "Super"} key = "j" func = "spawn" cmd = "netbeans"												[/key]
    [key] mod = {"Control", "Super"} key = "s" func = "spawn" cmd = "steam"														[/key]
		[key] mod = {"Control", "Super"} key = "d" func = "spawn" cmd = "dwb"															[/key]
	
		# Volume
		[key] mod = {""} key = "XF86AudioLowerVolume" 	func = "spawn" cmd = "amixer -q -c 0 sset 'Master' 4dB-"		[/key]
		[key] mod = {""} key = "XF86AudioRaiseVolume"		func = "spawn" cmd = "amixer -q -c 0 sset 'Master' 4dB+"		[/key]
		[key] mod = {""} key = "XF86AudioMute"					func = "spawn" cmd = "amixer -q -c 0 sset 'Master' toggle"  [/key]
  	[key] mod = {""} key = "XF86Eject"							func = "spawn" cmd = "eject -T"														  [/key]

		# Sync Google Drive
		[key] mod = {""} key = "XF86Tools" func = "exec" cmd = "sync_drive" [/key]
			
		# Screen Manipulation
		[key] mod = {"Control", "Super"} key = "Left" func = "screen_next" 	[/key]
		[key] mod = {"Control", "Super"} key = "Right" func = "screen_prev" [/key]

  	# Tag manipulation
  	[key] mod = {"Super"} key = "F1" func = "tag_set" cmd = "0" [/key]
  	[key] mod = {"Super"} key = "F2" func = "tag_set" cmd = "1" [/key]
  	[key] mod = {"Super"} key = "F3" func = "tag_set" cmd = "2" [/key]
  	[key] mod = {"Super"} key = "F4" func = "tag_set" cmd = "3" [/key]
  	[key] mod = {"Super"} key = "F5" func = "tag_set" cmd = "4" [/key]
  	[key] mod = {"Super"} key = "F6" func = "tag_set" cmd = "5" [/key]
  	[key] mod = {"Super"} key = "F7" func = "tag_set" cmd = "6" [/key]
  	[key] mod = {"Super"} key = "F8" func = "tag_set" cmd = "7" [/key]

  	[key] mod = {"Super", "Shift"} key = "F1" func = "tag_client" cmd = "0" [/key]
  	[key] mod = {"Super", "Shift"} key = "F2" func = "tag_client" cmd = "1" [/key]
  	[key] mod = {"Super", "Shift"} key = "F3" func = "tag_client" cmd = "2" [/key]
  	[key] mod = {"Super", "Shift"} key = "F4" func = "tag_client" cmd = "3" [/key]
  	[key] mod = {"Super", "Shift"} key = "F5" func = "tag_client" cmd = "4" [/key]
  	[key] mod = {"Super", "Shift"} key = "F6" func = "tag_client" cmd = "5" [/key]
  	[key] mod = {"Super", "Shift"} key = "F7" func = "tag_client" cmd = "6" [/key]
  	[key] mod = {"Super", "Shift"} key = "F8" func = "tag_client" cmd = "7" [/key]

  	[key] mod = {"Super"} key = "minus" func = "tag_del" [/key]
  	[key] mod = {"Super", "Shift"} key = "minus" func = "tag_new" [/key]
	
  	# tag function: cmd = nameofthetag
  	#[key] mod = {"Super"} key = "z" func = "tag" cmd = "2" [/key]

  	[key] mod = {"Control"} key = "Right" func = "tag_next" [/key]
  	[key] mod = {"Control"} key = "Left"  func = "tag_prev" [/key]

  	[key] mod = {"Super"} key = "q" func = "client_close" [/key]

  	# Focus next / prev client and next / prev tabbed client
  	[key] mod = { "Alt" }            key = "Tab" func = "client_focus_next" [/key]
  	[key] mod = { "Alt", "Shift" }   key = "Tab" func = "client_focus_prev" [/key]
  	[key] mod = { "Super" }          key = "Tab" func = "client_focus_next_tab" [/key]
  	[key] mod = { "Super", "Shift" } key = "Tab" func = "client_focus_prev_tab" [/key]

  	# Focus next client with direction
  	[key] mod = {"Alt"} key = "h" func = "client_focus_left"   [/key]
  	[key] mod = {"Alt"} key = "l" func = "client_focus_right"  [/key]
  	[key] mod = {"Alt"} key = "k" func = "client_focus_top"    [/key]
  	[key] mod = {"Alt"} key = "j" func = "client_focus_bottom" [/key]

  	# swap next client with direction:
  	[key] mod = {"Control", "Shift"} key = "h" func = "client_swap_left"   [/key]
  	[key] mod = {"Control", "Shift"} key = "l" func = "client_swap_right"  [/key]
  	[key] mod = {"Control", "Shift"} key = "k" func = "client_swap_top"    [/key]
  	[key] mod = {"Control", "Shift"} key = "j" func = "client_swap_bottom" [/key]

  	# Resize selected tiled client with direction
  	[key] mod = {"Super"} key = "h" func = "client_resize_left"   cmd = "20" [/key]
  	[key] mod = {"Super"} key = "l" func = "client_resize_left"   cmd = "-20" [/key]
  	[key] mod = {"Super"} key = "k" func = "client_resize_top"    cmd = "20" [/key]
  	[key] mod = {"Super"} key = "j" func = "client_resize_top"    cmd = "-20" [/key]
  	[key] mod = {"Alt", "Control"} key = "h" func = "client_resize_right"  cmd = "-20" [/key]
  	[key] mod = {"Alt", "Control"} key = "l" func = "client_resize_right"  cmd = "20" [/key]
  	[key] mod = {"Alt", "Control"} key = "k" func = "client_resize_bottom" cmd = "-20" [/key]
  	[key] mod = {"Alt", "Control"} key = "j" func = "client_resize_bottom" cmd = "20" [/key]

  	# Tabbing command
  	[key] mod = {"Alt", "Shift"} key = "h" func = "client_tab_left"   [/key]
  	[key] mod = {"Alt", "Shift"} key = "l" func = "client_tab_right"  [/key]
  	[key] mod = {"Alt", "Shift"} key = "k" func = "client_tab_top"    [/key]
  	[key] mod = {"Alt", "Shift"} key = "j" func = "client_tab_bottom" [/key]
  	[key] mod = {"Alt", "Shift"} key = "u" func = "client_untab" [/key]
  	[key] mod = {"Super"}        key = "t" func = "client_tab_next_opened" [/key]

  	# Layout manipulation
  	[key] mod = {"Super"}          key = "m" func = "layout_vmirror" [/key]
  	[key] mod = {"Super", "Shift"} key = "m" func = "layout_hmirror" [/key]
  	[key] mod = {"Super"}          key = "r" func = "layout_rotate_right" [/key]
  	[key] mod = {"Super", "Shift"} key = "r" func = "layout_rotate_left" [/key]

  	[key] mod = {"Control", "Super", "Alt"} key = "h" func = "layout_integrate_left" [/key]
  	[key] mod = {"Control", "Super", "Alt"} key = "j" func = "layout_integrate_bottom" [/key]
  	[key] mod = {"Control", "Super", "Alt"} key = "k" func = "layout_integrate_top" [/key]
  	[key] mod = {"Control", "Super", "Alt"} key = "l" func = "layout_integrate_right" [/key]

  	# Layout set historic travelling function (TESTING)
  	[key] mod = {"Super"} key = "o" func = "layout_prev_set" [/key]
  	[key] mod = {"Super", "Shift"} key = "o" func = "layout_next_set" [/key]

  	# Toggle client free/tile
  	[key] mod = {"Super"} key = "f" func = "client_toggle_free" [/key]

  	# Launcher
  	[key] mod = {"Super"} key = "p" func = "launcher" cmd = "exec" [/key]
[/keys]
